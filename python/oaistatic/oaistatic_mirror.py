#!/usr/bin/python3
# === File: oaistatic_mirror.py
# Version: 1.3.15
# Date: 2025-07-29 23:34:00 UTC
# Description: T√©l√©charge, convertit et relie les ressources HTML/CDN/externes pour lecture offline, avec support POSIX stdin/stdout, logs d√©taill√©s, et compatibilit√© navigateur √©tendue.

import os
import re
import sys
import json
import shutil
import hashlib
import argparse
from pathlib import Path
from datetime import datetime
from urllib.parse import urlparse

# R√©pertoires de base (modifiable √† terme via JSON externe)
OAISTATIC_BASE = Path.home() / "Dev/documentation/oaistatic"
HTML_DIR = OAISTATIC_BASE / "html"
LOG_DIR = OAISTATIC_BASE / "_log"
CDN_DIR = OAISTATIC_BASE / "cdn/assets"
PERSISTENT_DIR = OAISTATIC_BASE / "persistent"
EXTERNAL_DIR = OAISTATIC_BASE / "external_assets"

for p in [HTML_DIR, LOG_DIR, CDN_DIR, PERSISTENT_DIR, EXTERNAL_DIR]:
    p.mkdir(parents=True, exist_ok=True)

# Slugification personnalis√©e (accents, symboles)
def slugify_filename(name):
    substitutions = {
        "≈ì": "oe", "≈í": "oe", "‚Ç¨": "e", "$": "s", "√ß": "c", "√á": "c",
        "√©": "e", "√®": "e", "√™": "e", "√´": "e", "√â": "e", "√à": "e", "√ä": "e", "√ã": "e",
        "√†": "a", "√¢": "a", "√§": "a", "√Ä": "a", "√Ç": "a", "√Ñ": "a",
        "√Æ": "i", "√Ø": "i", "√é": "i", "√è": "i", "√¥": "o", "√∂": "o", "√î": "o", "√ñ": "o",
        "√ª": "u", "√π": "u", "√º": "u", "√õ": "u", "√ô": "u", "√ú": "u",
        "&": "et"
    }
    for src, tgt in substitutions.items():
        name = name.replace(src, tgt)
    name = re.sub(r"[^\w\s.-]", "-", name)
    name = re.sub(r"[-\s]+", "-", name)
    return name.lower()

# Hash MD5
def file_md5(path):
    h = hashlib.md5()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()

# √âcriture dans le log
def write_log_entry(log_path, entry):
    with open(log_path, "a") as f:
        f.write(f"{datetime.utcnow().isoformat()} ; {entry}\n")

# T√©l√©chargement simple
def download_file(url, dest):
    try:
        import requests
        r = requests.get(url, timeout=5)
        if r.status_code == 200:
            with open(dest, 'wb') as f:
                f.write(r.content)
            return True
    except:
        pass
    return False

# Traitement d'un fichier HTML
def process_html_file(html, input_name, args):
    slug_name = slugify_filename(input_name)
    mod_name = f"{slug_name}-mod.html"
    mod_path = HTML_DIR / mod_name
    log_name = f"{datetime.utcnow().strftime('%Y%m%dT%H%M%S')}.{mod_name}.log"
    log_path = LOG_DIR / log_name

    # === En-t√™te du log
    write_log_entry(log_path, f"# === oaistatic_mirror.py ‚Äì Version: 1.3.15 ‚Äì Date: {datetime.utcnow().isoformat()} ===")
    write_log_entry(log_path, f"Fichier analys√© : {input_name} @ {datetime.utcnow().isoformat()}")
    if input_name != slug_name:
        write_log_entry(log_path, f"Slugification : {input_name} ‚Üí {slug_name}")

    # V√©rif mod_path existant
    if mod_path.exists() and not args.force and not args.no_prompt:
        resp = input(f"‚ö†Ô∏è Le fichier {mod_path.name} existe. Remplacer ? (y/n) ")
        if resp.lower() != "y":
            print("‚èπÔ∏è Annul√©.")
            return

    # Dossier _fichiers
    input_stem = Path(input_name).stem
    local_dir = Path(input_stem + "_fichiers")
    rep_used = None
    if local_dir.exists():
        rep_used = local_dir
    elif args.force_dir and Path(args.force_dir).exists():
        rep_used = Path(args.force_dir)
    else:
        print("‚ö†Ô∏è Aucun r√©pertoire local d‚Äôassets trouv√©.")
        print("Tentative de t√©l√©chargement des √©l√©ments uniquement")
        print("Vous pouvez utiliser l‚Äôoption --force-dir DIRECTORY")
        resp = input("‚û§ Voulez-vous continuer ? [y/n] ")
        if resp.lower() != "y":
            return
    write_log_entry(log_path, f"R√©pertoire utilis√© : {rep_used if rep_used else 'Aucun (force-dir ou distant uniquement)'}")

    # Extraction et traitement
    pattern = r'(src|href)=["\']([^"\']+)["\']'
    matches = re.findall(pattern, html)

    for _, url in matches:
        parsed = urlparse(url)
        filename = os.path.basename(parsed.path)
        suffix = Path(filename).suffix[1:]
        if not filename:
            continue

        if "cdn.oaistatic.com" in parsed.netloc:
            new_path = CDN_DIR / filename
            new_link = f"../cdn/assets/{filename}"
            origine = "cdn"
        elif "persistent.oaistatic.com" in parsed.netloc:
            new_path = PERSISTENT_DIR / filename
            new_link = f"../persistent/{filename}"
            origine = "persistent"
        elif parsed.scheme in ["http", "https"]:
            new_path = EXTERNAL_DIR / filename
            new_link = f"../external_assets/{filename}"
            origine = "local"
        else:
            new_path = EXTERNAL_DIR / filename
            new_link = f"../external_assets/{filename}"
            origine = "local"

        # Copie ou DL
        if not new_path.exists():
            if rep_used and (rep_used / filename).exists():
                shutil.copy2(rep_used / filename, new_path)
                status = "copi√© ‚Äì local"
            elif download_file(url, new_path):
                status = "r√©√©crit ‚Äì distant"
            else:
                status = "non trouv√©"
        else:
            status = "identique ‚Äì d√©j√† pr√©sent"

        if not args.silent:
            print(f"üîÅ {filename} ‚Üí {new_link}")
        html = html.replace(url, new_link)
        write_log_entry(log_path, f"{input_name} ; {url} ; {new_link} ; {suffix} ; {status} ; origine: {origine}")

    # Sortie
    if args.stdout:
        sys.stdout.write(html)
    else:
        with open(mod_path, 'w', encoding='utf-8') as f:
            f.write(html)
        print(f"‚úÖ HTML modifi√© : {mod_path}")
        print(f"ü™µ Log : {log_path}")

# Main CLI
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("input_html", nargs="?", help="Fichier HTML source ou '-' pour stdin")
    parser.add_argument("--stdin-name", help="Nom factice si l‚Äôentr√©e provient d‚Äôun tube")
    parser.add_argument("--silent", action="store_true", help="Mode silencieux")
    parser.add_argument("--verbose", action="store_true", help="Mode verbeux")
    parser.add_argument("--force", action="store_true", help="Force l'√©crasement")
    parser.add_argument("--no-prompt", action="store_true", help="N‚Äôinterrompt jamais")
    parser.add_argument("--force-dir", help="R√©pertoire √† utiliser pour assets")
    parser.add_argument("--stdout", action="store_true", help="Sortie vers STDOUT")

    args = parser.parse_args()

    if args.input_html == "-" or not args.input_html:
        html = sys.stdin.read()
        name = args.stdin_name or "stdin.html"
        process_html_file(html, name, args)
    else:
        input_path = Path(args.input_html)
        if not input_path.exists():
            print(f"‚ùå Fichier introuvable : {args.input_html}")
            return
        with open(input_path, "r", encoding="utf-8") as f:
            html = f.read()
        process_html_file(html, input_path.name, args)

if __name__ == "__main__":
    main()
